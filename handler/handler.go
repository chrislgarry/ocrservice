package handler

import (
	"encoding/base64"
	"encoding/json"
	"io/ioutil"
	"net/http"
	"ocrservice/models"
	"os"
	"regexp"
	"sync"

	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/otiai10/gosseract/v2"
)

func SyncOcr(c echo.Context) error {

	var body = new(struct {
		Base64 string `json:"image_data"`
	})
	err := json.NewDecoder(c.Request().Body).Decode(body)

	tempfile, err := ioutil.TempFile("", "ocrservice"+"-")
	if err != nil {
		return echo.NewHTTPError(http.StatusInternalServerError, "Unable to create temp file for base64 image")
	}
	defer func() {
		tempfile.Close()
		os.Remove(tempfile.Name())
	}()
	body.Base64 = regexp.MustCompile("data:image\\/.*;base64,").ReplaceAllString(body.Base64, "")
	bytes, err := base64.StdEncoding.DecodeString(body.Base64)
	if err != nil {
		return echo.NewHTTPError(http.StatusInternalServerError, "Unable to decode base64 image")
	}

	tempfile.Write(bytes)
	client := gosseract.NewClient()
	defer client.Close()
	client.Languages = []string{"eng"}
	client.SetImage(tempfile.Name())
	text, err := client.Text()

	result := &models.OcrSync{
		Text: text,
	}

	return c.JSONPretty(http.StatusOK, result, " ")
}

func AsyncOcr(c echo.Context) error {

	// TODO: Implement handing of both
	// GET and POST requests to the same route
	// here. If GET, do a database lookup for taskid.
	// If POST, process the image data for OCR.

	var body = new(struct {
		Base64 string `json:"image_data"`
	})
	err := json.NewDecoder(c.Request().Body).Decode(body)

	tempfile, err := ioutil.TempFile("", "ocrservice"+"-")
	if err != nil {
		return echo.NewHTTPError(http.StatusInternalServerError, "Unable to create temp file for base64 image")
	}
	defer func() {
		tempfile.Close()
		os.Remove(tempfile.Name())
	}()
	body.Base64 = regexp.MustCompile("data:image\\/.*;base64,").ReplaceAllString(body.Base64, "")
	bytes, err := base64.StdEncoding.DecodeString(body.Base64)
	if err != nil {
		return echo.NewHTTPError(http.StatusInternalServerError, "Unable to decode base64 image")
	}

	tempfile.Write(bytes)
	client := gosseract.NewClient()
	defer client.Close()
	client.Languages = []string{"eng"}
	client.SetImage(tempfile.Name())
	uuid := uuid.New()
	wg := sync.WaitGroup{}
	wg.Add(1)
	// TODO: Execute OCR as a goroutine with a
	// task id as generated by UUID. Return
	// the task id, and store the OCR result in
	// the database entry indexed to by task id.
	go func() {
		//text, err := client.Text()
		if err != nil {
			return
		}
		wg.Done()
	}()

	wg.Wait()
	result := &models.OcrAsync{
		TaskId: uuid.String(),
	}

	return c.JSONPretty(http.StatusOK, result, " ")

}
